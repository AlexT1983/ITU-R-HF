# This program finds the groups of measurements that are to 
# combined in accordance with ITU-R P.1148 
# The output of htis program is used in the comparison of the 
# predicted data generated by ITUHFProp() and P533() 

import sys
import math

# Constants
D2R = math.pi/180.0
R2D = 180.0/math.pi
# Earth radius
R0 = 6371.0

# Open D1 Table 2
D1T1 = open('D1_Table1.csv','r')

# First line is a header ignore it
line = D1T1.readline()

FG1 = []
FG2 = []
FG3 = []
FG4 = []

D01 = []
D02 = []
D03 = []
D04 = []
D05 = []
D06 = []
D07 = []
D08 = []
D09 = []
D10 = []
D11 = []
D12 = []

SSN1 = []
SSN2 = []
SSN3 = []
SSN4 = []
SSN5 = []
SSN6 = []

WINTER = []
SUMMER = []
SPRING = []
AUTUMN = []

GL1 = []
GL2 = []
GL3 = []
GL4 = []

MLT1 = []
MLT2 = []
MLT3 = []
MLT4 = []
MLT5 = []
MLT6 = []

GER	= []
JPN	= []
CHN = []
IND	= []
DW = []
BBC = []
AUS = []

AD1 = []
AD2 = []

ltimeoffset = []
LT = []

for line in D1T1:
	data = line.split(',')

	ID = int(data[0])
	freq = float(data[3])
	dist = float(data[8])
	ssn = int(data[9])
	season = int(data[11])
	TXname = data[1]
	
	# Determine where there the receiver is
	TXlat = math.radians(float(line.split(',')[4].strip('NS').split('.')[0])+(float(line.split(',')[4].strip('NS').split('.')[1])/60))
	NorS = line.split(',')[4].strip('-0123456789.')
	TXlng = math.radians(float(line.split(',')[5].strip('EW').split('.')[0])+(float(line.split(',')[5].strip('EW').split('.')[1])/60))
	EorW = line.split(',')[5].strip('-0123456789.')
		
	if(NorS == 'S'):
		TXlat = -TXlat
	if(EorW == 'W'):
		TXlng = -TXlng
			
	RXlat = math.radians(float(line.split(',')[6].strip('NS').split('.')[0])+(float(line.split(',')[6].strip('NS').split('.')[1])/60))
	NorS = line.split(',')[6].strip('-0123456789.')
	RXlng = math.radians(float(line.split(',')[7].strip('EW').split('.')[0])+(float(line.split(',')[7].strip('EW').split('.')[1])/60))
	EorW = line.split(',')[6].strip('-0123456789.')

	if(NorS == 'S'):
		RXlat = -RXlat
	if(EorW == 'W'):
		RXlng = -RXlng
	
	# Determine the path distance
	distance = 2.0*R0*math.asin(math.sqrt(math.pow((math.sin((TXlat-RXlat)/2.0)),2.0) + math.cos(TXlat)*math.cos(RXlat)*math.pow((math.sin((TXlng - RXlng)/2.0)),2.0))) 

	ID = int(line.split(',')[0])
	if(ID >= 169): # Long way round
		distance = 2.0*R0*math.pi - distance
		
	# Find the path mid point
	d = distance/R0
	A = math.sin((0.5)*d)/math.sin(d)
	B = math.sin(0.5*d)/math.sin(d)
	x = A*math.cos(TXlat)*math.cos(TXlng) +  B*math.cos(RXlat)*math.cos(RXlng);
	y = A*math.cos(TXlat)*math.sin(TXlng) +  B*math.cos(RXlat)*math.sin(RXlng);
	z = A*math.sin(TXlat) +  B*math.sin(RXlat);
	midlat = math.atan2(z,math.sqrt(math.pow(x,2)+math.pow(y,2)));
	midlng = math.atan2(y,x);
	
	# Find the gormagnetic latitude
	GeoMagNPolelat = 78.5*D2R; 
	GeoMagNPolelng = -68.2*D2R;

	gmmidlat = math.asin(math.sin(midlat)*math.sin(GeoMagNPolelat) + math.cos(midlat)*math.cos(GeoMagNPolelat)*math.cos(midlng - GeoMagNPolelng));
	gmmidlng = math.asin(math.cos(midlat)*math.sin(midlng - GeoMagNPolelng)/math.cos(gmmidlat));
	
	# Determine the mid path time offset from the Rx
	if(ID >= 169): # Long way round
		ltimeoffset.append((midlat - RXlat)/(15.0*D2R))
		LT.append(ID)
	else:
		ltimeoffset.append((RXlat-midlat)/(15.0*D2R))
		LT.append(ID)

	# Frequency Groups
	if(freq <= 5):
		FG1.append(ID)
	elif((freq > 5 ) and (freq <= 10)):
		FG2.append(ID)
	elif((freq > 10 ) and (freq <= 15)):
		FG3.append(ID)
	elif((freq > 15 ) and (freq <= 30)):
		FG4.append(ID)
		
	# Distances
	if((dist >= 0 ) and (dist <= 999)):
		D01.append(ID)
	elif((dist > 1000 ) and (dist <= 1999)):
		D02.append(ID)
	elif((dist > 2000 ) and (dist <= 2999)):
		D03.append(ID)
	elif((dist > 3000 ) and (dist <= 3999)):
		D04.append(ID)
	elif((dist > 4000 ) and (dist <= 4999)):
		D05.append(ID)
	elif((dist > 5000 ) and (dist <= 6999)):
		D06.append(ID)
	elif((dist > 7000 ) and (dist <= 8999)):
		D07.append(ID)
	elif((dist > 9000 ) and (dist <= 11999)):
		D08.append(ID)
	elif((dist > 12000 ) and (dist <= 14999)):
		D09.append(ID)
	elif((dist > 15000 ) and (dist <= 17999)):
		D10.append(ID)
	elif((dist > 18000 ) and (dist <= 21999)):
		D11.append(ID)
	elif((dist > 22000 ) and (dist <= 40000)):
		D12.append(ID)
		
	# Long or Short distances
	if(dist < 9000 ):
		AD1.append(ID)
	elif(dist > 7000 ):
		AD2.append(ID)
		
	# Sun Spot Number
	if((ssn >= 0 ) and (ssn <= 14)):
		SSN1.append(ID)
	elif((ssn >= 15 ) and (ssn <= 44)):
		SSN2.append(ID)
	elif((ssn >= 45 ) and (ssn <= 74)):
		SSN3.append(ID)
	elif((ssn >= 75 ) and (ssn <= 104)):
		SSN4.append(ID)
	elif((ssn >= 105 ) and (ssn <= 149)):
		SSN5.append(ID)
	elif(ssn > 149):
		SSN6.append(ID)
	
	# Season
	if(midlat >= 0): # Northern hemisphere
		if((season == 11 ) or (season == 12) or (season == 1) or (season == 2)):
			WINTER.append(ID)
		elif((season == 3 ) or (season == 4)):
			SPRING.append(ID)
		elif((season == 5 ) or (season == 6) or (season == 7) or (season == 8)):
			SUMMER.append(ID)
		elif((season == 9 ) or (season == 10)):
			AUTUMN.append(ID)
	elif(midlat < 0):
		if((season == 11 ) or (season == 12) or (season == 1) or (season == 2)):
			SUMMER.append(ID)
		elif((season == 3 ) or (season == 4)):
			AUTUMN.append(ID)
		elif((season == 5 ) or (season == 6) or (season == 7) or (season == 8)):
			WINTER.append(ID)
		elif((season == 9 ) or (season == 10)):
			SPRING.append(ID)
			
	# Geomagnetic Latitude
	gmmidlat = gmmidlat*R2D
	
	if((gmmidlat == 0 ) and (gmmidlat <= 20)):
		GL1.append(ID)
	elif((gmmidlat > 20 ) and (gmmidlat <= 40)):
		GL2.append(ID)
	elif((gmmidlat > 40 ) and (gmmidlat <= 60)):
		GL3.append(ID)
	elif(gmmidlat > 60 ):
		GL4.append(ID)
		
	# Origin of data
	if(TXname == 'ALLOUIS'):
		BBC.append(ID)
	elif(TXname == 'ANKARA'):
		BBC.append(ID)
	elif(TXname == 'ASCENSION'):
		BBC.append(ID)
	elif(TXname == 'BEIJING'):
		CHN.append(ID)
	elif(TXname == 'BOMBAY'):
		IND.append(ID)
	elif(TXname == 'BRACKNELL'):
		BBC.append(ID)
	elif(TXname == 'CANBERRA'):
		AUS.append(ID)
	elif(TXname == 'CANBERRA LP'):
		AUS.append(ID)
	elif(TXname == 'CARNARVON'):
		AUS.append(ID)
	elif(TXname == 'DARWIN'):
		AUS.append(ID)
	elif(TXname == 'DAVENTRY'):
		BBC.append(ID)
	elif(TXname == 'DELANO'):
		BBC.append(ID)
	elif(TXname == 'DERBY'):
		AUS.append(ID)
	elif(TXname == 'EKALA'):
		IND.append(ID)
	elif(TXname == 'FORT COLLINS'):
		BBC.append(ID)
	elif(TXname == 'GREENVILLE'):
		BBC.append(ID)
	elif(TXname == 'HYDERABAD'):
		IND.append(ID)
	elif(TXname == 'JERUSALEM'):
		BBC.append(ID)
	elif(TXname == 'KAUAI'):
		AUS.append(ID)
	elif(TXname == 'KAVALLA'):
		BBC.append(ID)
	elif(TXname == 'KOGANEI'):
		JPN.append(ID)
	elif(TXname == 'KRANJI'):
		CHN.append(ID)
	elif(TXname == 'KURSEONG'):
		IND.append(ID)
	elif(TXname == 'KUWAIT'):
		BBC.append(ID)
	elif(TXname == 'LUXEMBURG'):
		DW.append(ID)
	elif(TXname == 'MAHE'):
		IND.append(ID)
	elif(TXname == 'MASIRAH'):
		BBC.append(ID)
	elif(TXname == 'MAURITIUS'):
		IND.append(ID)
	elif(TXname == 'MEYERTON'):
		BBC.append(ID)
	elif(TXname == 'NEW YORK'):
		BBC.append(ID)
	elif(TXname == 'NORFOLK'):
		BBC.append(ID)
	elif(TXname == 'OSLO'):
		BBC.append(ID)
	elif(TXname == 'PLYMOUTH'):
		BBC.append(ID)
	elif(TXname == 'PORI'):
		BBC.append(ID)
	elif(TXname == 'PORO'):
		CHN.append(ID)
	elif(TXname == 'QUITO'):
		AUS.append(ID)
	elif(TXname == 'RANCHI'):
		IND.append(ID)
	elif(TXname == 'SACKVILLE'):
		AUS.append(ID)
	elif(TXname == 'SANWA'):
		JPN.append(ID)
	elif(TXname == 'SANWA LP'):
		JPN.append(ID)
	elif(TXname == 'SHANNON'):
		BBC.append(ID)
	elif(TXname == 'SHEPPART LP'):
		BBC.append(ID)
	elif(TXname == 'SHEPPARTON'):
		BBC.append(ID)
	elif(TXname == 'SKELTON'):
		BBC.append(ID)
	elif(TXname == 'TEHERAN'):
		IND.append(ID)
	elif(TXname == 'TINANG'):
		CHN.append(ID)
	elif(TXname == 'TOKYO'):
		JPN.append(ID)
	elif(TXname == 'WASHINGTON'):
		BBC.append(ID)
	elif(TXname == 'WERTACHTAL'):
		BBC.append(ID)
	elif(TXname == 'XIAN'):
		CHN.append(ID)
		
		

# sys.exit()
		
##########################################
################  Print ##################
##########################################	

############ Frequency Groups ############

# Frequency Group 2 - 5 MHZ		
last = 0 
outstr = []
count = 0
for ID in FG1:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)		
	last = ID
print('# Frequency Group 2 - 5 MHZ ', count)
print('FG0205 = ', outstr)

# Frequency Group > 5 - 10 MHZ		
last = 0 
outstr = []
count = 0
for ID in FG2:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)		
	last = ID
print('# Frequency Group > 5 - 10 MHZ ', count)
print('FG0510 = ', outstr)

# Frequency Group > 10 - 15 MHZ		
last = 0 
outstr = []
count = 0
for ID in FG3:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Frequency Group > 10 - 15 MHZ ', count)
print('FG1015 = ', outstr)

# Frequency Group > 15 - 30 MHZ		
last = 0 
outstr = []
count = 0
for ID in FG4:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Frequency Group > 15 - 30 MHZ ', count)
print('FG1530 = ', outstr)

######## Distance Group ##########

# Distance Group  0 - 999 km		
last = 0 
outstr = []
count = 0
for ID in D01:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 0 - 999 km ', count)
print('DG01 = ', outstr)

# Distance Group > 1000 - 1999 km		
last = 0 
outstr = []
count = 0
for ID in D02:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 1000 - 1999 km ', count)
print('DG02 = ', outstr)

# Distance Group 2000 - 2999 km		
last = 0 
outstr = []
count = 0
for ID in D03:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 2000 - 2999 km ', count)
print('DG03 = ', outstr)

# Distance Group 3000 - 3999 km		
last = 0 
outstr = []
count = 0
for ID in D04:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 3000 - 3999 km ', count)
print('DG04 = ', outstr)

# Distance Group 4000 - 4999 km		
last = 0 
outstr = []
count = 0
for ID in D05:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 4000 - 4999 km ', count)
print('DG05 = ', outstr)

# Distance Group 5000 - 6999 km		
last = 0 
outstr = []
count = 0
for ID in D06:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 5000 - 6999 km ', count)
print('DG06 = ', outstr)

# Distance Group 7000 - 8999 km		
last = 0 
outstr = []
count = 0
for ID in D07:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 7000 - 8999 km ', count)
print('DG07 = ', outstr)

# Distance Group 9000 - 11999 km		
last = 0 
outstr = []
count = 0
for ID in D08:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 9000 - 11999 km ', count)
print('DG08 = ', outstr)

# Distance Group 12000 - 14999 km		
last = 0 
outstr = []
count = 0
for ID in D09:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 12000 - 14999 km ', count)
print('DG09 = ', outstr)

# Distance Group 15000 - 17999 km		
last = 0 
outstr = []
count = 0
for ID in D10:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 15000 - 17999 km ', count)
print('DG10 = ', outstr)

# Distance Group 18000 - 21999 km		
last = 0 
outstr = []
count = 0
for ID in D11:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 18000 - 21999 km ', count)
print('DG11 = ', outstr)

# Distance Group 22000 - 40000 km		
last = 0 
outstr = []
count = 0
for ID in D12:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Distance Group 22000 - 40000 km ', count)
print('DG12 = ', outstr)

#### Sunspot number groups #################

# Sunspot Group 0 - 14 		
last = 0 
outstr = []
count = 0
for ID in SSN1:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Sunspot Group 0 - 14 ', count)
print('SSN1 = ', outstr)

# Sunspot Group 15 - 44 		
last = 0 
outstr = []
count = 0
for ID in SSN2:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Sunspot Group 15 - 44 ', count)
print('SSN2 = ', outstr)

# Sunspot Group 45 - 74 		
last = 0 
outstr = []
count = 0
for ID in SSN3:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Sunspot Group 45 - 74 ', count)
print('SSN3 = ', outstr)

# Sunspot Group 75 - 104 		
last = 0 
outstr = []
count = 0
for ID in SSN4:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Sunspot Group 75 - 104 ', count)
print('SSN4 = ', outstr)

# Sunspot Group 105 - 149 		
last = 0 
outstr = []
count = 0
for ID in SSN5:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Sunspot Group 105 - 149 ', count)
print('SSN5 = ', outstr)

# Sunspot Group > 149  		
last = 0 
outstr = []
count = 0
for ID in SSN6:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Sunspot Group 149 ', count)
print('SSN6 = ', outstr)

# Winter 		
last = 0 
outstr = []
count = 0
for ID in WINTER:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Winter ', count)
print('Winter = ', outstr)

# Spring  		
last = 0 
outstr = []
count = 0
for ID in SPRING:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Spring ', count)
print('Spring = ', outstr)

# Summer  		
last = 0 
outstr = []
count = 0
for ID in SUMMER:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Summer ', count)
print('Summer = ', outstr)

# Autumn  		
last = 0 
outstr = []
count = 0
for ID in AUTUMN:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Autumn ', count)
print('Autumn = ', outstr)

# Geomagnetic Latitude 0 - 20 degrees  		
last = 0 
outstr = []
count = 0
for ID in GL1:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Geomagnetic Latitude 0 - 20 degrees ', count)
print('GL1 = ', outstr)

# Geomagnetic Latitude >20 - 40 degrees   		
last = 0 
outstr = []
count = 0
for ID in GL2:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Geomagnetic Latitude >20 - 40 degrees ', count)
print('GL2 = ', outstr)

# Geomagnetic Latitude >40 - 60 degrees  	
last = 0 
outstr = []
count = 0
for ID in GL3:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Geomagnetic Latitude >40 - 60 degrees ', count)
print('GL3 = ', outstr)

# Geomagnetic Latitude >60 degrees  
last = 0 
outstr = []
count = 0
for ID in GL4:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Geomagnetic Latitude >60 degrees ', count)
print('GL4 = ', outstr)

# All distances < 9000 km  	
last = 0 
outstr = []
count = 0
for ID in AD1:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# All distances < 9000 km ', count)
print('AD1 = ', outstr)

# All distances > 7000 km  
last = 0 
outstr = []
count = 0
for ID in AD2:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# All distances > 7000 km ', count)
print('AD2 = ', outstr)

# Origin Germany  
last = 0 
outstr = []
count = 0
for ID in GER:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Origin Germany ', count)
print('GER = ', outstr)

# Origin Japan
last = 0 
outstr = []
count = 0
for ID in JPN:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Origin Japan ', count)
print('JPN = ', outstr)

# Origin China
last = 0 
outstr = []
count = 0
for ID in CHN:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Origin China ', count)
print('CHN = ', outstr)

# Origin India  
last = 0 
outstr = []
count = 0
for ID in IND:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Origin India ', count)
print('IND = ', outstr)

# Origin Deutsche Welle 
last = 0 
outstr = []
count = 0
for ID in DW:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Origin Deutsche Welle ', count)
print('DW = ', outstr)

# Origin BBC/EBU  
last = 0 
outstr = []
count = 0
for ID in BBC:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Origin BBC/EBU ', count)
print('IND = ', outstr)

# Origin Austrailia
last = 0 
outstr = []
count = 0
for ID in AUS:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)	
	last = ID
print('# Origin Austrailia ', count)
print('AUS = ', outstr)

# Local time offset
last = 0 
outstr = []
ltimestr = []
count = 0
for ID in LT:
	count = count + 1
	# Print the ID if it is unique
	if(last != ID):
		outstr.append(ID)
		ltimestr.append(ltimeoffset[count])
	last = ID
print('# Local time offset', count)
print('LT = ', outstr)
print('LT offset =', ltimestr)

D1T1.close()