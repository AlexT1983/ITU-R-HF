'''
	D1_InputFiles_REC.py - This routine creates the prediction scenario files
						for REC533() and stores them in .\REC_dat directory.
						Secondly this routine produces a file D1_REC.bat that 
						is used to generate output files in .\REC_out directory
						that corespond to the *.dat files 
'''

import sys
import os

# Find out where you are
full_path = os.path.realpath(__file__)
cwdpath = os.path.dirname(full_path)

# Open output bath file
bat_file = open("D1_REC.bat", 'wt')

# Make the input and output directories if they don't exist
datpath = cwdpath+"\REC_dat" 
if not os.path.exists(datpath): os.makedirs(datpath)
outpath = cwdpath+"\REC_out" 
if not os.path.exists(outpath): os.makedirs(outpath)

# Open the prediction scenario file that was generated by D1_GenList.py
D1T1_file = open("D1_Table1.csv", "rt")

# Read the first line header and do nothing
D1T1_file.readline()

# Write the first line to the batch file
batstr = 'cd c:\\ITHFBC\\BIN_WIN'
print(batstr, file=bat_file) 

# Initialize line counter for D1.csv
m = 0
for line in D1T1_file:
	'''
	Now you can deal with each line in D1.csv which has the following format
	
	0	ID				179
	1	Tx Name			SHEPPART.LP
	2	Rx Name			JOKELA
	3	Freq (MHz)		11.9
	4	Tx Lat (D.M)	36.20S
	5	Tx Lng (D.M)	145.25E
	6	Rx Lat (D.M)	60.34N
	7	RX Lng (D.M)	25.00E
	8	Distance (km)	24935
	9	SSN				29
	10	Year			84
	11	Month			10
	'''
	
	# Parse the line in D1.csv
	str = line.strip('\n').split(',')
	
	# Create the *.in file name that will be written to the output file
	dat_file_name = datpath+'\\'+str[0]+'-'+str[11]+'-'+str[10]+'.dat'
	test_file_name = str[0]+'-'+str[11]+'-'+str[10]
	
	##############################################################
	# Create the batch file command associated with this *.dat file 
	# i) Move the .dat file into the c:\itshfbc\run directory because rec533w can't handle long path names
	# ii) run rec533w 
	# iii) Move the .out file to the desired location
	# iv) delete the .dat and .out file in the c:\itshfbc\run directory
	#
	# Example
	# copy C:\Users\Behm\Documents\GitHub\GitHf\D1\REC_dat\1-8-84.dat c:\ITSHFBC\RUN\1-8-84.dat
	# C:\ITSHFBC\BIN_WIN\rec533w c:\itshfbc 1-8-84.dat 1-8-84.out
	# copy c:\ITSHFBC\RUN\1-8-84.out C:\Users\Behm\Documents\GitHub\GitHf\D1\REC_out\1-8-84.out
	# del c:\ITSHFBC\RUN\1-8-84.dat
	# del c:\ITSHFBC\RUN\1-8-84.out
	# cd \Users\Behm\Documents\GitHub\GitHf\D1
	#
	batstr = 'copy '+datpath+'\\'+test_file_name+'.dat '+'c:\\itshfbc\\run\\'+test_file_name+'.dat'
	print(batstr, file=bat_file)
	batstr = 'C:\\ITSHFBC\\BIN_WIN\\rec533w C:\\ITSHFBC '+test_file_name+'.dat'+' '+test_file_name+'.out'
	print(batstr, file=bat_file) 
	batstr = 'copy c:\\itshfbc\\run\\'+test_file_name+'.out'+' '+outpath+'\\'+test_file_name+'.out'
	print(batstr, file=bat_file) 
	batstr = 'del '+'C:\\ITSHFBC\\RUN\\'+test_file_name+'.dat'
	print(batstr, file=bat_file)
	batstr = 'del '+'C:\\ITSHFBC\\RUN\\'+test_file_name+'.out'
	print(batstr, file=bat_file)

	##############################################################
	# Open output *.in text file
	dat_file = open(dat_file_name, 'wt')
	
	# Determine if this is a short or long path
	SorL = 'S'
	if(str[1].count(' LP') != 0):
		SorL = 'L'
	
	# Note: All coordinates must be converted from 
	# Degrees.Minutes given in the D1 databank to 
	# Degrees.DecimalDegrees which REC533() expects
	txlat = (float(str[4].strip('NS').split('.')[0])+(float(str[4].strip('NS').split('.')[1])/60))
	NorS = str[4].strip('-0123456789.')
	txlng = (float(str[5].strip('EW').split('.')[0])+(float(str[5].strip('EW').split('.')[1])/60))
	EorW = str[5].strip('-0123456789.')
		
	txns = 'N'
	if(NorS == 'S'):
		txlat = abs(txlat)
		txns = 'S'
	txew = 'E'
	if(EorW == 'W'):
		txlng = abs(txlng)
		txew = 'W'
	
	# Path.L_rx.lat & Path.L_rx.lng
	rxlat = (float(str[6].strip('NS').split('.')[0])+(float(str[6].strip('NS').split('.')[1])/60))
	NorS = str[6].strip('-0123456789.')
	rxlng = (float(str[7].strip('EW').split('.')[0])+(float(str[7].strip('EW').split('.')[1])/60))
	EorW = str[7].strip('-0123456789.')
		
	rxns = 'N'
	if(NorS == 'S'):
		rxlat = abs(rxlat)
		rxns = 'S'
	rxew = 'E'
	if(EorW == 'W'):
		rxlng = abs(rxlng)
		rxew = 'W'
		
	# Write REC533 dat file
	# OUTPUT Fortran Format
	#8     format('OUTPUT    ',2i5)
	print('OUTPUT        6    0', file=dat_file)

	# COEFFS Fortran Format
	#101   format('COEFFS    ',a4)
	print('COEFFS    CCIR', file=dat_file)	

	# SUNSPOT Fortran Format
	#2     format('SUNSPOT   ',12f5.0)
	print('SUNSPOT   {0:3.0f}.'.format(float(str[9])), file=dat_file)

	# TIME Fortran Format
	#3     format('TIME      ',3i5)
	print('TIME          1   24    1', file=dat_file)
	
	# MONTH Fortran Fomat
	#4     format('MONTH     ',11i5)
	print('MONTH      19{0:2s}   {1:2s}'.format(str[10], str[11]), file=dat_file) 
	
	# TRANS Fortran Format
	#6     format(a10,a20,f7.2,a1,f10.2,a1,2x,a1,5x,1hD)
	print('TRANS     {0:20s}{1:7.2f}{2:1s}{3:10.2f}{4:1s}  {5:1s}     D'.format(str[1], txlat, txns, txlng, txew, SorL), file=dat_file)
	
	# RECVR Fortran Format
	#6     format(a10,a20,f7.2,a1,f10.2,a1,2x,a1,5x,1hD)
	print('RECVR     {0:20s}{1:7.2f}{2:1s}{3:10.2f}{4:1s}  {5:1s}     D'.format(str[2], rxlat, rxns, rxlng, rxew, SorL), file=dat_file)

	# SYST Fortran Format
	#1     format('SYST      ',f10.4,f5.2,i5,f5.1)
	print('SYST          1.0000 3.00    0  0.0', file=dat_file)
	
	# ANTENNA Fortran Format (Transmitter)
	#11    format('ANTENNA   ',4i5,f10.3,1h[,a21,1h],f5.1,f10.4)
	print('ANTENNA       1    1    2   30     0.000[default\CCIR.000     ]  0.0    1.0000', file=dat_file)

	# ANTENNA Fortran Format (Receiver)
	#11    format('ANTENNA   ',4i5,f10.3,1h[,a21,1h],f5.1,f10.4)
	print('ANTENNA       2    2    2   30     0.000[default\CCIR.000     ]  0.0    0.0000', file=dat_file)
	
	# NOIS Fortran Format
	#
	print('NOIS       -145    1   73   90', file=dat_file)
	
	# Freq Fortran Format
	#7        format('FREQ      ',10f7.3)
	print('FREQ      {0:7.3f}  0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000  0.000'.format(float(str[3])), file=dat_file)
	
	# EXEC 
	#
	print('EXEC', file=dat_file)

	# QUIT 
	print('QUIT', file=dat_file)

	dat_file.close()
	
	print('Creating file #', m, '  ', dat_file_name)
	m += 1
	
bat_file.close()
	
D1T1_file.close()
